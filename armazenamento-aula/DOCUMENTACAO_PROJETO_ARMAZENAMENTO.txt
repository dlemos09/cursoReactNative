===============================================================================
               DOCUMENTAÇÃO COMPLETA - PROJETO ARMAZENAMENTO
===============================================================================

📋 VISÃO GERAL DO PROJETO
--------------------------
Este é um aplicativo React Native/Expo que demonstra diferentes tipos de 
armazenamento de dados locais. O app funciona como um bloco de notas com 
segurança por PIN, showcaseando três tipos principais de armazenamento:

1. AsyncStorage - Para dados não sensíveis (notas)
2. SecureStore - Para dados sensíveis (PIN de segurança)  
3. FileSystem - Para backup de dados em arquivos

🎯 PRINCIPAIS FUNCIONALIDADES
-----------------------------
✅ Sistema de autenticação por PIN (4+ dígitos)
✅ Criação, visualização e exclusão de notas
✅ Armazenamento persistente das notas
✅ Backup e exportação de dados
✅ Visualização do conteúdo do backup
✅ Interface escura e moderna
✅ Validações de segurança

🏗️ ARQUITETURA DO PROJETO
---------------------------
armazenamento-aula/
├── app/
│   └── _layout.jsx          # Componente principal da aplicação
├── styles/
│   └── styles.js           # Estilos globais da aplicação
├── package.json            # Dependências e scripts
└── app.json               # Configurações do Expo

📦 DEPENDÊNCIAS PRINCIPAIS
---------------------------
🔹 @react-native-async-storage/async-storage: Armazenamento local não sensível
🔹 expo-secure-store: Armazenamento seguro para dados sensíveis
🔹 expo-file-system: Operações com sistema de arquivos
🔹 expo-router: Sistema de roteamento do Expo
🔹 react-native: Framework base

⚙️ FLUXO DA APLICAÇÃO
----------------------
1. INICIALIZAÇÃO
   - Verifica se existe PIN salvo
   - Carrega notas do AsyncStorage
   - Define estado inicial da autenticação

2. AUTENTICAÇÃO
   - Se não há PIN: Processo de criação (definir + confirmar)
   - Se há PIN: Solicita entrada para verificação
   - PIN é armazenado de forma segura no SecureStore

3. INTERFACE PRINCIPAL
   - Lista de notas carregadas do AsyncStorage
   - Campo para adicionar novas notas
   - Botões de ação (limpar, backup, ver backup)

4. OPERAÇÕES DE DADOS
   - Adicionar nota: Salva no AsyncStorage automaticamente
   - Limpar notas: Remove todas com confirmação
   - Backup: Exporta JSON para FileSystem
   - Ver backup: Lê e exibe conteúdo do arquivo

🔐 SEGURANÇA IMPLEMENTADA
--------------------------
• PIN obrigatório com mínimo de 4 dígitos
• Armazenamento seguro do PIN usando SecureStore (Keychain/Keystore)
• Validação de entrada de dados
• Confirmação para ações destrutivas
• Tratamento de erros robusto

💾 TIPOS DE ARMAZENAMENTO UTILIZADOS
------------------------------------

1. ASYNCSTORAGE (@react-native-async-storage/async-storage)
   Uso: Armazenar as notas do usuário
   Características:
   • Não criptografado
   • Persiste entre sessões
   • Ideal para dados não sensíveis
   • API assíncrona simples

2. SECURESTORE (expo-secure-store)
   Uso: Armazenar o PIN de segurança
   Características:
   • Criptografado (Keychain no iOS, Keystore no Android)
   • Máxima segurança para dados sensíveis
   • Resistente a ataques
   • Pode sobreviver a reinstalações

3. FILESYSTEM (expo-file-system)
   Uso: Criar backup das notas em arquivo JSON
   Características:
   • Acesso direto ao sistema de arquivos
   • Permite operações de leitura/escrita
   • Útil para importação/exportação
   • Controle total sobre formato dos dados

🎨 INTERFACE DO USUÁRIO
------------------------
• Design escuro moderno (#0b132b como cor base)
• Cards com bordas arredondadas para as notas
• Botões com gradientes e feedback visual
• Layout responsivo e intuitivo
• Feedback via alertas para ações importantes

📱 COMPORTAMENTOS ESPECIAIS
----------------------------
• Teclado é automaticamente fechado após adicionar nota
• Validação em tempo real do PIN
• Confirmação obrigatória para limpeza de dados
• Mensagens de erro específicas para cada tipo de falha
• Estados de carregamento para operações assíncronas

🚀 COMO EXECUTAR O PROJETO
---------------------------
1. Instalar dependências: npm install
2. Iniciar o Expo: npx expo start
3. Escanear QR code com Expo Go ou usar emulador
4. Configurar PIN na primeira execução
5. Começar a usar o aplicativo

🔧 POSSÍVEIS MELHORIAS FUTURAS
-------------------------------
• Adicionar edição de notas existentes
• Implementar categorias/tags para notas
• Adicionar busca/filtro nas notas
• Sincronização com serviços na nuvem
• Backup automático periódico
• Biometria como alternativa ao PIN
• Temas claro/escuro personalizáveis
• Exportação para diferentes formatos (PDF, TXT)

💡 CONCEITOS DEMONSTRADOS
--------------------------
• Gerenciamento de estado com hooks (useState, useEffect)
• Operações assíncronas e tratamento de erros
• Diferentes estratégias de persistência de dados
• Segurança em aplicações móveis
• Interface do usuário responsiva
• Validação de entrada de dados
• Ciclo de vida de componentes React

===============================================================================
